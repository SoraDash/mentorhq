generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model BillingInfo {
  id            String    @id @default(uuid())
  company       String    @unique
  address_1     String?
  address_2     String?
  postcode      String?
  phone         String?
  email         String?
  invoiceprefix String?
  city          String?
  country       String?
  created_at    DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isDeleted     Boolean   @default(false)
  deletedAt     DateTime? @default(now())
}

model CourseType {
  id                  String    @id @default(uuid())
  name                String
  courseCode          String
  months              Int
  projectCount        Int
  prefix              String
  project_stages      Json
  description         String
  specialisation_code String
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  isDeleted           Boolean   @default(false)
  deletedAt           DateTime? @default(now())
}

model InvoiceLine {
  id          String    @id @default(uuid())
  service     String?
  description String?
  duration    Int?
  amount      Float?
  created_at  DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime? @default(now())
}

model Invoice {
  id          String    @id @default(uuid())
  invoice_id  String
  code        String?
  invoiceDate DateTime?
  dueDate     DateTime?
  month       Int?
  year        Int?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime? @default(now())
}

model Notification {
  id         String   @id @default(uuid())
  content    String
  from       String?
  isRead     Boolean?
  title      String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model ProjectType {
  id         String   @id @default(uuid())
  name       String
  order      Int?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Project {
  id         String            @id @default(uuid())
  name       String
  deadline   DateTime?
  github     String?
  live_url   String?
  type       String
  completed  ProjectCompletion @default(NOTSTARTED)
  created_at DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  isDeleted  Boolean           @default(false)
  deletedAt  DateTime?         @default(now())
}

model SessionType {
  id         String   @id @default(uuid())
  name       String
  order      Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model StudentSession {
  id          String    @id @default(uuid())
  date        DateTime  @default(now())
  type        String?
  progress    String?
  summary     String?   @db.Text
  notes       String?   @db.Text
  duration    Int?
  session_url String?
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime? @default(now())
}

model Student {
  id            String    @id @default(uuid())
  name          String
  email         String
  contactMethod String?
  lastContact   DateTime  @updatedAt
  github        String?
  slack         String?
  skype         String?
  linkedIn      String?
  programmeId   String?
  courseCode    String?
  startDate     DateTime?
  lms_access    Boolean?
  status        String?
  mentor        User?     @relation(fields: [mentorId], references: [id])
  mentorId      String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  isDeleted     Boolean   @default(false)
  deletedAt     DateTime? @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], name: "userId")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "userId")
}

model User {
  id               String           @id @default(cuid())
  name             String?
  email            String           @unique
  emailVerified    DateTime?
  image            String?
  isOnboarded      Boolean          @default(false)
  isPremium        Boolean          @default(false)
  firstName        String?
  lastName         String?
  paidPerHour      Int?
  calendly_token   Json?
  sendWelcomeEmail Boolean?
  github           String?
  slack            String?
  linkedIn         String?
  website          String?
  skype            String?
  status           String?
  twitter          String?
  ciApiKey         String?
  ciEmail          String?
  role             Role             @default(USER)
  accounts         Account[]
  sessions         Session[]
  studentSession   StudentSession[]
  students         Student[]
  updated_at       DateTime         @updatedAt
  created_at       DateTime         @default(now())
}

enum Role {
  ADMIN
  MENTOR
  USER
}

enum ProjectCompletion {
  COMPLETED
  FAILED
  ACTIVE
  NOTSTARTED
}
