generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model BillingInfo {
  id            String    @id @default(uuid())
  company       String    @unique
  address_1     String?
  address_2     String?
  postcode      String?
  phone         String?
  email         String?
  invoiceprefix String?
  city          String?
  country       String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime? @default(now())
  isDeleted     Boolean   @default(false)
}

model InvoiceLine {
  id          String    @id @default(uuid())
  service     String?
  description String?
  duration    Int?
  amount      Float?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  isDeleted   Boolean   @default(false)
  deleted_at  DateTime? @default(now())
}

model Invoice {
  id          String    @id @default(uuid())
  invoice_id  String
  code        String?
  invoiceDate DateTime?
  dueDate     DateTime?
  month       Int?
  year        Int?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  isDeleted   Boolean   @default(false)
  deleted_at  DateTime? @default(now())
}

model Notification {
  id         String   @id @default(uuid())
  content    String
  from       String?
  isRead     Boolean?
  title      String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Course {
  id                String            @id @default(uuid())
  courseCode        String            @unique
  name              String
  description       String
  months            Int
  projectCount      Int
  hasSpecialization Boolean           @default(false)
  prefix            String
  projects          ProjectTemplate[]
  students          Student[]
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
}

model Project {
  id               String            @id @default(uuid())
  name             String
  prefix           String
  order            Int
  status           ProjectCompletion
  templateId       String
  studentId        String
  template         ProjectTemplate   @relation(fields: [templateId], references: [id])
  student          Student           @relation(fields: [studentId], references: [id])
  studentSessions  StudentSession[]
  isSpecialization Boolean           @default(false)
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
}

model ProjectTemplate {
  id         String    @id @default(uuid())
  name       String
  prefix     String
  order      Int
  courseId   String
  course     Course    @relation(fields: [courseId], references: [id])
  projects   Project[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model SessionType {
  id    String @id @default(uuid())
  name  String @unique
  order Int
  icon  String
}

model StudentSession {
  id             String          @id @default(uuid())
  date           String
  type           String?
  progress       SessionProgress @default(AVERAGE)
  summary        String?         @db.Text
  follow_up      String?         @db.Text
  submissionType String?
  notes          String?         @db.Text
  duration       Int?
  session_url    String?
  student        Student         @relation(fields: [studentId], references: [id])
  studentId      String
  user           User            @relation(fields: [userId], references: [id])
  userId         String
  project        Project         @relation(fields: [projectId], references: [id])
  projectId      String
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  isDeleted      Boolean         @default(false)
  deleted_at     DateTime?       @default(now())
}

model Student {
  id            String           @id @default(uuid())
  name          String
  email         String           @unique
  firstName     String?
  lastName      String?
  contactMethod ContactMethod?   @default(SLACK)
  lastContact   DateTime?        @updatedAt
  github        String?
  slack         String?
  skype         String?
  linkedIn      String?
  programmeID   String?
  courseCode    String?
  startDate     DateTime?
  lmsAccess     Boolean?
  status        String?
  bio           String?          @db.Text()
  mentor        User?            @relation(fields: [mentorId], references: [id], onDelete: SetNull)
  mentorId      String?
  created_at    DateTime?        @default(now())
  updated_at    DateTime?        @updatedAt
  isDeleted     Boolean?         @default(false)
  unassignedAt  DateTime?        @default(now())
  courseId      String?
  course        Course?          @relation(fields: [courseId], references: [id])
  projects      Project[]
  sessions      StudentSession[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], name: "userId")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "userId")
}

model User {
  id                 String           @id @default(cuid())
  name               String?
  email              String           @unique
  emailVerified      DateTime?
  image              String?
  isOnboarded        Boolean          @default(false)
  isPremium          Boolean          @default(false)
  firstName          String?
  lastName           String?
  paidPerHour        Int?
  calendly_token     Json?
  calendly_last_path String?
  sendWelcomeEmail   Boolean?
  github             String?
  slack              String?
  linkedIn           String?
  website            String?
  skype              String?
  status             String?
  twitter            String?
  ciApiKey           String?
  ciEmail            String?
  bio                String?          @db.Text()
  role               Role             @default(USER)
  accounts           Account[]
  sessions           Session[]
  studentSession     StudentSession[]
  students           Student[]
  updated_at         DateTime         @updatedAt
  created_at         DateTime         @default(now())
}

enum Role {
  ADMIN
  MENTOR
  USER
}

enum ProjectCompletion {
  COMPLETED
  FAILED
  ACTIVE
  NOTSTARTED
}

enum ContactMethod {
  SLACK
  SKYPE
  ZOOM
  GOOGLE
}

enum SessionProgress {
  POOR
  AVERAGE
  EXCELLENT
}
